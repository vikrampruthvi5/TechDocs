{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Knowledge Hub","text":"<ul> <li> <p> Kubestronaut     ---     Kubernetes and Cloud-Native Associate prep.      Open KCNA</p> </li> <li> <p> HELM     ---     Helm charts training and practice assignments      Open HELM</p> </li> <li> <p> MKDOCS Assets     ---     Site tweaks, components, and authoring helpers.      Open Tweaks</p> </li> </ul>"},{"location":"Helm/","title":"HELM Charts","text":""},{"location":"Helm/#what-is-helm-chart","title":"What is helm chart?","text":"<p>WHat is helm?</p> <p>Helm charts are a powerful tool for managing Kubernetes applications. They simplify the deployment process by packaging all the necessary Kubernetes resources, such as deployments, services, and configurations, into a single reusable unit called a chart. This allows developers and operators to easily install, upgrade, and manage applications in a consistent and repeatable way. Helm charts also support versioning, making it easier to track changes and roll back to previous versions if needed.</p> <p>The most used helm package repository: https://bitnami.com/stacks/helm</p>"},{"location":"Helm/#why-helm","title":"Why helm?","text":"<ol> <li>Revision history</li> <li>Consistency</li> </ol>"},{"location":"Helm/#install-helm","title":"Install Helm","text":"<p>There are 3 ways to install HELM</p> <ol> <li>Using Binaries</li> <li>Using script. Download the script and run it</li> <li>Using package managers     === \"Brew\"     <code>bash   brew install helm</code>     === \"Choco\"     <code>bash   choco install kubernetes-helm</code> 3. USING APT/YUM</li> </ol> <p>Check Installation:</p> <pre><code>helm --help\n</code></pre>"},{"location":"Helm/#connecting-helm-to-k8s","title":"Connecting HELM to K8s","text":"<p>HELM uses the same kube config file as kubectl to connect to the cluster.</p>"},{"location":"Helm/#helm-basics","title":"HELM Basics","text":""},{"location":"Helm/#basic-commands","title":"Basic Commands","text":"Basic commands syntax Command Description <code>helm create &lt;chart-name&gt;</code> Creates a new Helm chart with a default structure. <code>helm install &lt;name&gt; &lt;chart&gt;</code> Installs a Helm chart into a Kubernetes cluster. <code>helm upgrade &lt;release&gt; &lt;chart&gt;</code> Upgrades an existing release with a new chart version. <code>helm uninstall &lt;release&gt;</code> Uninstalls a Helm release from the cluster. <code>helm repo add &lt;name&gt; &lt;url&gt;</code> Adds a new Helm chart repository. <code>helm repo update</code> Updates the local cache of Helm repositories. <code>helm search repo &lt;keyword&gt;</code> Searches for charts in the added repositories. <code>helm lint &lt;chart&gt;</code> Analyzes a chart for potential issues. <code>helm package &lt;chart&gt;</code> Packages a chart into a <code>.tgz</code> archive for distribution. <code>helm template &lt;chart&gt;</code> Renders a chart to Kubernetes manifests without deploying it. <code>helm test &lt;release&gt;</code> Runs tests for a specific release. <code>helm rollback &lt;release&gt; &lt;revision&gt;</code> Rolls back a release to a previous revision. <code>helm show values &lt;chart&gt;</code> Displays the default values of a chart. <code>helm dependency update</code> Updates the dependencies of a chart based on its <code>Chart.yaml</code>. <code>helm push &lt;chart&gt; &lt;repo&gt;</code> Pushes a packaged chart to a Helm repository (requires OCI support). <pre><code>| Command                       | Description                                                                                                                                                                  |\n| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Show repo list                | `$ helm repo list`                                                                                                                                                           |\n| Add new repository            | `$ helm repo add myrepo [https://charts.bitnami.com/bitnami](https://charts.bitnami.com/bitnami)`                                                                            |\n| Search the repo               | `$ helm search repo mysql`                                                                                                                                                   |\n| List all versions             | `$ helm search repo mysql --version` &lt;br&gt; _By default the latest version of the chart is shown._                                                                             |\n| Remove repository             | `$ helm repo remove myrepo`                                                                                                                                                  |\n| Install a chart               | `$ helm install mysql myrepo/mysql` &lt;br&gt; _mysql name is unique in a namespace._                                                                                              |\n| Check the installation status | `$ helm status mysql`                                                                                                                                                        |\n| List releases                 | `$ helm list` &lt;br&gt; `$ helm list --namespace mysql` &lt;br&gt; _By default revisions are listed from default namespace. Use `--namespace` or `-n` to specify a specific namespace._ |\n| Remove an installed release   | `$ helm uninstall mysql` &lt;br&gt; `$ helm uninstall -n mysql mysql` &lt;br&gt; _Without namespace, the uninstallation happens from the default namespace._                             |\n| Upgradeexisting repository    | `$ helm repo update` &lt;br&gt; _It will connect to the remote repository and pull the latest updates._                                                                            |\n| Update installed chart        | `$ helm upgrade mysql bitnami/mysql --values /Users/pvikram/Documents/Learning/HELM/mysql/properties.yaml`                                                                   |\n</code></pre>"},{"location":"Helm/#practicing-installation-of-mysql-with-helm","title":"Practicing Installation of MySQL with HELM","text":""},{"location":"Helm/#adding-repo-and-listing-repos","title":"Adding repo and listing repos","text":""},{"location":"Helm/#search-for-mysql-in-repos","title":"Search for mysql in repos","text":""},{"location":"Helm/#installing-mysql-from-bitnami-repo","title":"Installing mysql from bitnami repo","text":""},{"location":"Helm/#check-the-status-of-installation","title":"Check the status of installation","text":""},{"location":"Helm/#get-helm-installation-status","title":"Get helm installation status","text":"<p>Sql Configuration</p> <p>There will be some instructions to configure mysql or any other chart. Use the below command to get the status and instructions) </p>"},{"location":"Helm/#remove-installed-chartrelease","title":"Remove installed chart/release","text":""},{"location":"Helm/#namespace-specific-installation","title":"Namespace-specific Installation","text":"<p>Names for installed releases must have a unique name in a namespace. Same name can be used in different namespaces.</p> <p></p> <p></p> <p></p>"},{"location":"Helm/#passing-custom-configuration-to-helm","title":"Passing custom configuration to helm","text":"<p>Example: When installing mysql using helm, a password is generated by helm chart. But we can pass the configuration to take the default password.</p> <p>There are two ways in which custom config is passed.</p> <ol> <li> <p>Using --set</p> </li> <li> <p>Using YAML property file</p> </li> </ol> <p>Using --set</p> <p></p> <p>Using property file</p> <p>Create a property yaml file and place all your configurations in that file. Pass the file which installing a chart.</p> <p></p> <p></p> <p></p>"},{"location":"Helm/#helm-upgrade","title":"Helm Upgrade","text":"<p>Updating the repository:</p> <p>\\$ helm repo update</p> <p>This command downloads the latest chart versions from the remote repository.</p> <p>To update a chart, run the below command. Usually the commands to upgrade a particular chart is already available in the chart documentation.</p> <p>\\$ helm upgrade mysql bitnami/mysql --values \\&lt;path to values file&gt;.</p> <p>This command will upgrade the installed chart with the latest version if available. You can also see that chart revision is updated.</p> <p></p> <p></p> <p></p> <p>Helm is smart enough to send just the updates that are required. It wont send all the changes.</p>"},{"location":"Helm/#reusing-values","title":"Reusing Values","text":"<p>When performing an upgrade, helm requires same values to be passed again that were used during first installation. When same values are not passed, the helm uses the default values to perform the upgrade.</p> <p>To avoid this, use --reuse-values option</p> <p>\\$ helm upgrade mysql bitnami/mysql --reuse-values</p> <p>This command ensures that the same values are used.</p>"},{"location":"Helm/#release-records","title":"Release Records","text":"<p>Helm maintains release records as secrets in kubernetes. To check the records, use the kubectl get secrets command.</p> <p></p> <p></p> <p>Even after uninstallation, you can store the history</p> <p>\\$ helm uninstall mysql --keep-history</p>"},{"location":"Helm/#assignment-1-install-tomcat-using-custom-configuration","title":"Assignment 1: Install Tomcat using custom configuration","text":"<p>Created below custom configuration for tomcat server.</p> <p>tomcatPassword: \"testpassword\"</p> <p>service:</p> <p>type: NodePort</p> <p>nodePorts:</p> <p>http: 30007</p> <p>pdb:</p> <p>create: true</p> <p>minAvailable: 2</p> <p>Other configuration details can be found in the below links. https://github.com/bitnami/charts/tree/main/bitnami/tomcat/#installing-the-chart</p> <p>https://artifacthub.io/packages/helm/bitnami/tomcat/10.3.5</p> <p></p> <p></p>"},{"location":"Helm/#_1","title":"HELM Charts","text":""},{"location":"Helm/#advanced-commands","title":"Advanced Commands","text":""},{"location":"Helm/#what-happens-in-the-background","title":"What happens in the background","text":"<p>Focus on what happens during the installation of a helm chart</p> <ol> <li> <p>Load the chart templates and dependencies (if local, else downloads the chart and loads them)</p> </li> <li> <p>Parses the default values.yaml</p> </li> <li> <p>Generates the final YAML files by replacing the placeholders</p> </li> <li> <p>Validates the generated Yaml</p> </li> <li> <p>Generates the final YAML and sends it to Kube</p> </li> </ol>"},{"location":"Helm/#helm-dry-run","title":"HELM Dry run","text":"<p>The dry run helps you check if the templates, values, and everything are properly created and the final YAML is validated.</p> <p>With a dry-run, 5th phase from above will not be performed.</p> <p>\\$ helm install mydb bitnami/mysql \u2013values \\&lt;path&gt; --dry-run</p>"},{"location":"Helm/#helm-template-command","title":"Helm Template Command","text":"<p>Several projects require templates as dry-run include non-yaml format code.</p> <p>\\$ helm template mysql bitnami/mysql --namespace mysql --values /Users/pvikram/Documents/Learning/HELM/tomcat/values.yaml</p> <p>Template command does not just send yaml to kube but also doesn\u2019t validate the code.</p>"},{"location":"Helm/#helm-get-command","title":"Helm Get-Command","text":"<p>Helm get allows you to do few things</p> <ol> <li> <p>Get release notes: helm get notes mysql</p> </li> <li> <p>Get Values used: helm get values mysql (only used values)</p> <ol> <li> <p>helm get values mysql --all (Gives all values even not used.)</p> </li> <li> <p>helm get values mysql --revision 2 (Values of a special revision)</p> </li> </ol> </li> <li> <p>Get manifests: helm get manifest mysql (can be used with revision)</p> </li> </ol>"},{"location":"Helm/#helm-history","title":"Helm History","text":"<p>This allows you to track all changes made on the chart. It includes not only the upgrade information, and revision information, but also provides the error information. For example, if you install Apache webserver and upgrade with an invalid value, the upgrade fails and that information is also stored in the history.</p> <p></p> <p>Let\u2019s try to upgrade with an invalid value</p> <p></p> <p>Let\u2019s check the history</p> <p></p>"},{"location":"Helm/#helm-rollback","title":"Helm Rollback","text":"<p>Allows you to roll back during any failure. In the following scenario, the newly installed apache server is running as expected.</p> <p></p> <p>Let\u2019s upgrade it with an error</p> <p></p> <p>Let\u2019s check the rollback function.</p> <p></p>"},{"location":"Helm/#create-namespace-during-new-installation","title":"Create Namespace during new installation","text":"<p>helm install by default does not create a new namespace and also fails if the namespace doesn\u2019t exist. But, you can force the helm command to create the namespace for you.</p> <p>\\$ helm install mysql --namespace mysql --create-namespace bitnami/mysql</p> <p>This will ensure that the namespace exists if not creates it.</p> <p></p>"},{"location":"Helm/#helm-upgrade-or-install","title":"Helm Upgrade or Install","text":"<p>In CI/CD pipeline this will be very useful. This command will allow to select between install and upgrade operations</p> <ol> <li> <p>If the chart is already installed, the upgrade is used.</p> </li> <li> <p>If the chart is not installed, the chart is installed with out making any changes to the command.</p> </li> </ol> <p>\\$ helm upgrade --install mysql bitnami/mysql</p>"},{"location":"Helm/#generate-name-for-releases","title":"Generate name for releases","text":"<p>You can ask helm to create a name for the release by using the below option. So that you dont have to pass the name to the command. Helm also make sure that the names are not re used.</p> <p>\\$ helm install bitnami/mysql --generate-name</p> <p>You can also control the name generation using below option.</p> <p>\\$ helm install bitnami/mysql --generate-name --name-template \u201cwebserver-{{randAlpha 7 | lower}}\u201d</p> <p>{{}} - Go lang expression</p> <p>randAlpha - Golang function</p> <p>7 - attribute value to the function</p> <p>lower - Upper case is not allowed by K8s in their names. Hence this golang func allows to convert to lowercase.</p>"},{"location":"Helm/#helm-wait","title":"Helm Wait","text":"<p>By default, helm doesn\u2019t wait for the resources to be created. Once the YAML is sent to the Kube in the 5th phase, the helm operation will end. But we can change this functionality by passing the --wait option.</p> <p>\\$ helm install mysql bitnami/mysql --wait</p> <p>This option ensures that the resources are created and the pods are up and running.</p> <p></p> <p></p> <p>Let\u2019s try installing with the wait option</p> <p></p> <p>You can compare the start and end time. Only when the requested pods are completely up and running, then only the helm operation exits.</p> <p></p>"},{"location":"Helm/#helm-timeout","title":"Helm Timeout","text":"<p>Wait option is a great way to ensure the successful creation of K8s resources. But what if the installation is held due to k8s resources not getting created successfully. Timeout option helps you to define the length of time you want to wait.</p> <p>\\$ helm install apache bitnami/apache --wait --timeout 10m5s</p>"},{"location":"Helm/#helm-atomic-install","title":"Helm Atomic Install","text":"<p>Due to any reason, if the release fails, the --atomic option will roll it back to the previous successful release.</p> <p>\\$ helm install apache bitnami/apache --atomic</p> <p></p> <p>The rollback information is also recorded in the helm history with a new revision which is rolling back to revision 1.</p> <p></p> <p>You can also use timeout and wait with atomic releases.</p>"},{"location":"Helm/#helm-forceful-upgrades","title":"Helm Forceful Upgrades","text":"<p>With default upgrade, the helm only restarts pods whose values are changed rather than restarting all the pods. We can change this functionality by passing the force option.</p> <p>\\$ helm upgrade mysql bitnami/mysql --force</p>"},{"location":"Helm/#helm-cleanup-on-failure","title":"Helm Cleanup on failure","text":"<p>During any failure, not all resources like config maps, etc are removed. You can pass --cleanup-on-failure option to remove them.</p> <p>\\$ helm upgrade --install apache bitnami/apache --cleanup-on-failure</p> <p>This will ensure the upgrade or install cleans all the resources when failed to complete successfully.</p> <p>This is not recommended as cleaning all will not allow us to debug the issue.</p>"},{"location":"Helm/#assignment-2","title":"Assignment 2:","text":"<p>Install apache tomcat on the kubernetes cluster and write commands for all the below.</p> <p></p> Generate Name <p>$ helm install bitnami/tomcat --generate-name --name-template \u201cserver-{{randAlpha 10 | lower}}\u201d</p> Dry run <p>$ helm install bitnami/tomcat --generate-name --name-template \u201cserver-{{randAlpha 10 | lower}}\u201d --dry-run</p> Templates <p>$ helm template bitnami/tomcat --generate-name --name-template \"server-{{randAlpha 10|lower}}\"</p> Get release notes $ helm get notes server-hggblacjrz Get release records $ kubectl get secrets"},{"location":"Helm/#if-the-command-is-failing-make-sure-to-check-the-double-quotations","title":"If the command is failing make sure to check the double-quotations","text":""},{"location":"Helm/#if-the-command-is-failing-make-sure-to-check-the-double-quotations-1","title":"If the command is failing make sure to check the double-quotations","text":""},{"location":"Helm/#if-the-command-is-failing-make-sure-to-check-the-double-quotations-2","title":"If the command is failing make sure to check the double-quotations","text":""},{"location":"Helm/#working-with-own-charts","title":"Working with own Charts","text":""},{"location":"Helm/#create-helm-charts","title":"Create Helm Charts","text":"<p>To create your own helm chart use the below command to create the template. By default, the nginx chart is used to create the structure.</p> <p>\\$ helm create first-chart</p> <p>But you can use a different chart as your starter chart.</p>"},{"location":"Helm/#folderfile-structure","title":"Folder/File Structure","text":"<p>By running the above command, the below structure is created under firstChart folder which is the name we passed in the command.</p> <p></p> Name Type Description Chart.yaml File Metadata of the chart Charts folder Dependency charts are pulled and stored templates folder All the yaml files to create the K8s resources are stored here values.yaml file All the values to render the chart yaml is stored in this file Notes.txt file Release notes for this chart is stored in this file"},{"location":"Helm/#installing-the-chart-using-the-custom-chart","title":"Installing the chart using the custom chart","text":"<p>In the previous step we created the custom chart. Now lets install the chart.</p> <p>\\$ helm install firstChart firstChart (Assuming that the firstChart is the name of the folder in pwd)</p> <p></p> <p>Installation failed because the kubernetes do not allow Capital letters in the names of the resources. To fix this, we need to re create the structure with firstchart instead of firstChart</p> <p></p>"},{"location":"Helm/#how-notes-is-rendered","title":"How Notes is rendered?","text":"<p>The NOTES.txt holds the information with placeholders. The placeholders are replaced with the values from values.yaml.</p> <p></p> <p>.Values.service.type is rendered from the value in the values.yaml</p> <p></p>"},{"location":"Helm/#understanding-filesfolders","title":"Understanding Files/Folders","text":""},{"location":"Helm/#understand-chartyaml","title":"Understand Chart.yaml","text":"<p>apiVersion: v2</p> <p>name: firstchart</p> <p>description: A Helm chart for Kubernetes</p> <p>type: application</p> <p>version: 0.1.0</p> <p>appVersion: \"1.16.0\"</p> <p>Chart.yaml holds the metadata of the chart. Artifacthub and other artifact hubs use the information from this file.</p> <p>There are three important elements</p> <ol> <li> <p>apiVersion: Determines the format of the document. Helm 3.0 uses the v2 version.</p> </li> <li> <p>name: Name of the chart</p> </li> <li> <p>version: Version of the chart. Start from 0.1.0. When any change is made to the chart, value can be bumped.</p> </li> </ol> <p>Rest of the elements are optional.</p> <ol> <li> <p>description: used to describe the chart</p> </li> <li> <p>type: Application / Library. When set to Library, only functions that can be used by other charts are defined. It won\u2019t have any templates.</p> </li> <li> <p>appVersion: Version of the application that is packaged through this chart.</p> </li> </ol> <p>Optional Elements:</p> <ol> <li> <p>icon: Link to image file remote or local</p> </li> <li> <p>keywords: List of keywords that define this project. Like db, mysql, etc\u2026</p> </li> <li> <p>home: URL to the project on the internet. Like the home page, etc\u2026</p> </li> <li> <p>sources: URLs to different source information. This is an YAML array</p> </li> </ol> <p>sources:</p> <p>- http://pruthvivikram.com/helm</p> <p>- http://pruthvivikram.com</p> <ol> <li>maintainers:</li> </ol> <p>- name: pruthvi</p> <p>email: test@gmail.com</p> <p>- name: vikram</p> <p>email: tes1t@gmail.com</p>"},{"location":"Helm/#templates-folder","title":"Templates Folder","text":"<p>Heart of Helm charts. Yaml files are included in this folder with placeholders whose values are replaced using the values.yaml file. This is the google go templating structure. Using this templating structure, you can also specify conditions as well.</p> <p></p>"},{"location":"Helm/#understand-helperstpl-file","title":"Understand Helpers.tpl file","text":"<p>If you want to define any methods that can be used across all the template files, you can define them in this _helpers.tpl file</p> <p>Sample function to expand the name of the chart.</p> <p></p>"},{"location":"Helm/#understand-valuesyaml-file","title":"Understand Values.yaml file","text":"<p>In the values.yaml default values are already present based on the chart. You can replace/change the defined values.</p> <p>This is how the values are defined.</p> <p></p> <p>How defined values are used?</p> <p></p> <p>This is how the values file are referred in the deployment files.</p>"},{"location":"Helm/#helm-packaging","title":"Helm Packaging","text":"<p>This is the process of packaging the created chart to repositories, hubs, etc so that it can be install across different environments like QA, Staging, Production, etc\u2026 through CI/CD pipelines, etc\u2026</p> <p>\\$ helm package firstchart</p> <p></p> <p>Being at the root level of the chart folder, run the above command. This will generate .tgz file which will have all the required files along with the version of the chart.</p> <p>Helm install command also works with this .tgz file. Highlighted in orange is the format in which the command expects.</p>"},{"location":"Helm/#package-dependency-update","title":"Package dependency update","text":"<p>\\$ helm package firstchart --dependency-update</p> <p>\\$ helm package firstchart -u</p> <p>This command downloads the latest dependencies and updates the package. The latest version of the dependency charts are stored in the charts folder before packaging.</p>"},{"location":"Helm/#package-location","title":"Package Location","text":"<p>By default the final package (.tgz) file is stored inside the present working directory. If you want to change the location use -d flag.</p> <p></p> <p>\\$ helm package firstchart --destination \\&lt;path&gt;</p> <p>\\$ helm package firstchart -d \\&lt;path&gt;</p> <p></p>"},{"location":"Helm/#other-options-for-packaging","title":"Other Options for packaging","text":"<p>Visit https://helm.sh/docs/helm/helm_package/ for other packaging options.</p> <p></p> <p></p>"},{"location":"Helm/#helm-lint","title":"Helm Lint","text":"<p>This command scans through the code and fixes syntactic and indent issues with the templates or commands.</p> <p>There are three types of errors</p> <ol> <li> <p>INFO</p> </li> <li> <p>WARNING</p> </li> <li> <p>ERROR</p> </li> </ol> <p>INFO and WARNING returns 0 error code.</p> <p>ERROR returns a non-zero error code.</p> <p></p> <p></p>"},{"location":"Helm/#helm-ignore","title":"Helm Ignore","text":"<p>If you want to ignore a file from packaging you can add those files or patterns in the .helmignore file</p> <p>https://helm.sh/docs/chart_template_guide/helm_ignore_file</p>"},{"location":"Helm/#helm-template-go-lang","title":"Helm Template &amp; Go Lang","text":"<p>Template uses go lang to control what resources are created in clusters. Not whole golang is required to develop templates.</p>"},{"location":"Helm/#template-actions","title":"Template Actions","text":"<p>Actions start and end with two flower brackets. We use these to define variables, invoking functions, etc. Anything outside the brackets are rendered as is. The content inside the brackets are evaluated and rendered.</p> <p>{{ ACTION }}</p> <p>{{ include \u201cfirstchart.fullname\u201d . }}</p>"},{"location":"Helm/#action-element-white-space-removal","title":"Action element - White space removal","text":"<p>{{- include \u201cfirstchart.fullname\u201d . -}} : - is used to remove any leading or trailing spaces. Since yaml is stricts about spaces and indentation, hyphens are used to remove additional spaces.</p> <p>Only one hyphen - is required for one set of braces. Either at the end or at the start. {{- \u201c\u201d}} or {{\u201c\u201d -}}.</p>"},{"location":"Helm/#action-element-string-concat","title":"Action element - String concat","text":"<p>If you have two string in action block, you can separate them using a comma.</p> <p>{{- \u201cHello \u201d }}, {{ \u201cWorld\u201d -}}</p> <p></p> <p></p> <p></p>"},{"location":"Helm/#template-information","title":"Template Information","text":"<p>When helm renders, it passes all the information represented by a dot (.) object.</p> <p></p>"},{"location":"Helm/#template-info-values-object","title":"Template Info: .Values object","text":"<p>Ex: The value defined in the values.yaml can be accessed using the . object</p> <p></p> <p>This my.custom.data value can be accessed using dot(.) object as follows.</p> <p>{{.Values.my.custom.data}}</p> <p></p>"},{"location":"Helm/#values-represents-the-valuesyaml-file-and-its-contents","title":".Values represents the values.yaml file and its contents.","text":""},{"location":"Helm/#template-info-chart-object","title":"Template info: .Chart object","text":"<p>You can use the chart information from charts.yaml file using .Chart object.</p> <p></p> <p></p>"},{"location":"Helm/#template-info-release","title":"Template Info: .Release","text":"<p>This will give the release information. This information can be used to display as information or in the conditional statements.</p>"},{"location":"Helm/#template-info-template","title":"Template Info: .Template","text":"<p>You can get the template information using below</p> <p></p>"},{"location":"Helm/#template-info-pipelines","title":"Template Info: Pipelines","text":"<p>Pipe symbol is used to pass the output of the previous function or variable to the next command/function</p> <p>Here in the above example, toYaml . output is passed to nindent function with 8 as an attribute value.</p>"},{"location":"Helm/#template-functions","title":"Template Functions","text":"<p>Functions are used to perform set of operations. They can be used anywhere in the template file. Some of the functions are nindent, toYaml, etc.</p> <p>You can find the list of functions in the below URL.</p> <p>https://helm.sh/docs/chart_template_guide/function_list/</p>"},{"location":"Helm/#default-function","title":"Default function","text":"<p>Custom.data has a value hence it is printed as \u201cThis is test value.\u201d</p> <p>Custom.data1 has no value, so it printed the \u201cDefault information\u201d as output.</p>"},{"location":"Helm/#upper-function","title":"Upper function","text":""},{"location":"Helm/#lower-function","title":"Lower function","text":""},{"location":"Helm/#quote-function","title":"Quote function","text":""},{"location":"Helm/#template-conditions","title":"Template Conditions","text":""},{"location":"Helm/#conditions-if-else","title":"Conditions: IF ELSE","text":""},{"location":"Helm/#conditions-with","title":"Conditions: With","text":"<p>You can run each value from a Yaml array using with clause.</p> <p></p> <p>You can also use else condition with with condition. If the array is empty, then the else clause kick in.</p> <p></p> <p>Hare, if the podAnnotations array is present, then the annotations: is printed with each array value. If the array is empty, then the whole portion is skipped.</p>"},{"location":"Helm/#conditions-variables","title":"Conditions: Variables","text":"<p>Variable is created in {{\\$VARNAME}} format.</p> <p>To assign a value we use :=</p> <p>To reassign a value we use =</p> <p></p>"},{"location":"Helm/#template-loops","title":"Template Loops","text":""},{"location":"Helm/#loops-for-loop","title":"Loops: For loop","text":"<p>Range is used as for loop in Helm templates. Unlike with, range process one element at a time.</p>"},{"location":"Helm/#loops-dict-types","title":"Loops: Dict types","text":""},{"location":"Helm/#debugging-the-templates","title":"Debugging the Templates","text":"<p>You can use --debug to check if there are any errors in the code or template. You can use the dry-run to validate the syntactical and semantical errors in the code.</p> <p>You can also perform the same using the helm template. But, the only difference is that the template command doesn\u2019t do the validation. For example, if you remove the kind: Deployment and run the helm template firstchart, It will print the data as it\u2019s not performing any validation. But if you do the same with helm install --dry-run firstchart, It will fail.</p>"},{"location":"Helm/#helm-get-manifests","title":"Helm Get Manifests","text":"<p>Very useful to get the manifest while doing the installation. The manifest sent to kubernetes after rendering all the template files can be retrieved using this command.</p> <p></p>"},{"location":"Helm/#helperstpl-file","title":"Helpers.tpl file","text":"<p>.tpl stands for template. This host several functions that are used across the templates.</p> <p>{{- define \u201cfirstchart.name\u201d -}} is the template of the defining a function.</p> <p>{{- include \u201cfirstchart.name\u201d -}} or {{- template \u201cfirstchart.name\u201d -}} is used to reference above defined namespace.</p> <p>Diff is with template, you can not use output to pipe to another function, its only possible with include.</p>"},{"location":"Helm/#define-custom-template","title":"Define custom Template","text":"<p>Now you can use firstchart.mytemplate anywhere. And the value is referenced from values.yaml.</p>"},{"location":"Helm/#use-the-template","title":"Use the template","text":""},{"location":"Helm/#passing-default-value","title":"Passing Default Value","text":"<p>This way we can set a default value. If the values.yaml is missing myTemplate variable and values, it will return the default value here in this case, Chart Name</p> <p></p>"},{"location":"Helm/adv_charts/","title":"Advanced Chart","text":""},{"location":"Helm/adv_charts/#advanced-chart","title":"Advanced Chart","text":"<ul> <li> <p>Dependency management</p> </li> <li> <p>Exchanging values across dependency charts</p> </li> <li> <p>Helm Hooks</p> </li> <li> <p>How to test your chart?</p> </li> </ul>"},{"location":"Helm/adv_charts/#dependencies","title":"Dependencies","text":"<p>In the chart.yaml, add dependency section</p> <p>dependencies:</p> <ul> <li>name: mysql</li> </ul> <p>version: \u201c8.8.6\u201d</p> <p>repository: \u201chttps://charts.bitnami.com/bitnami\u201d</p> <p>Now the dependencies have been defined. Let\u2019s update the dependency</p> <p>\\$ helm dependency update</p> <p>By now, the dependency chart has been downloaded and stored in the charts folder from the central repository.</p> <p></p>"},{"location":"Helm/adv_charts/#dependency-version-range","title":"Dependency Version Range","text":"<p>Instead of hardcoding the chart version in the dependency, we can mention range.</p> <p></p> <p>Other options</p> <p>~ 1.3.4, ~ 2, ~ 2.3, &gt;= 1.2.3, \\&lt; 1.4.0, &gt;= 2, &gt;= 2.3, \\&lt;2.4, \\&lt;3</p>"},{"location":"Helm/adv_charts/#chart-lock","title":"Chart Lock","text":"<p>Helm also generates a lock file for charts. Its called chart.lock. This file consists of the dependency list along with the version of chart.</p> <p></p>"},{"location":"Helm/adv_charts/#using-reponame-instead-of-url","title":"Using RepoName instead of URL","text":"<p>If we already have a repository thats already downloaded to local, we can mention the name directly instead of URL.</p> <p>\u201c@bitnami\u201d</p> <p></p>"},{"location":"Helm/adv_charts/#conditional-dependency","title":"Conditional Dependency","text":"<p>In the values.yaml, define a property</p> <p>mysql:</p> <p>enable: false</p> <p>And in the chart.yaml, set a variable for dependency to check the condition</p> <p>condition: mysql.enabled</p> <p>Below is when the mysql is disabled</p> <p></p> <p>Below is when the condition is set to true.</p> <p></p>"},{"location":"Helm/adv_charts/#multiple-conditional-dependencies","title":"Multiple Conditional Dependencies","text":"<p>If you have multiple conditions, instead of repeating values in values.yaml you can use TAGS</p> <p>In the below screenshot, tags are used to disable mysql installation.</p> <p></p>"},{"location":"Helm/adv_charts/#passing-values-to-dependencies","title":"Passing Values to Dependencies","text":"<p>Usually for dependency charts, the default values are passed. But if you want to customize your chart, use the values.yaml and chart.yaml.</p> <p>Values.yaml</p> <p>mysql:</p> <p>auth:</p> <p>rootPassword: test1234</p> <p></p> <p>Let\u2019s test the custom values</p> <p></p> <p></p>"},{"location":"Helm/adv_charts/#read-values-from-child-chart","title":"Read Values from Child Chart","text":"<p>We can use import-values element in the chart dependency to import values from child to parent chart.</p>"},{"location":"Helm/adv_charts/#explicit-export-and-import","title":"Explicit export and import","text":"<p>Usually the child chart exports few values explicitly. Mysql wont do that. But if the child chart\u2019s values.yaml has a property like below</p> <p>export:</p> <p>service:</p> <p>port: 8080</p> <p>And the chart dependencies has</p> <p>import-values:</p> <ul> <li>service</li> </ul> <p>With this setup, the service can be used in any of the parent child\u2019s yaml files as if they are added in the values.yaml file.</p> <p>{{- .Values.service.type .}}</p>"},{"location":"Helm/adv_charts/#use-values-that-are-not-exported","title":"Use values that are not exported","text":"<p>NOTE: If the child\u2019s values.yaml file doesn\u2019t contain export, then the child dependency doesn\u2019t export any values. But even then we can use the values.</p> <p>In chart.yaml, instead of element name, use below element configuration</p> <p>import-values:</p> <ul> <li> <p>child: primary.service</p> </li> <li> <p>parent: mysqlService</p> </li> </ul> <p>With this configuration, you can get use mysql\u2019s service details in the parent yamls.</p> <p></p>"},{"location":"Helm/adv_charts/#hooks","title":"Hooks","text":"<p>Used to take special actions during the release process. The file is created under chart\u2019s templates folder.</p> <p>hookpod.yaml is the file that can be used to create any kubernetes resources</p> <p></p> <p>In the above hookpod, a busy box pod is getting created. The hook is identified based on the annotations that are added in the yaml file.</p> <p>helm.sh/hook is used to decide when to run the hook. pre-install : Before any of the other resources are created, the busy-box is created and run.</p> <p>You can deploy any type Kubernetes resources but not only the pod.</p>"},{"location":"Helm/adv_charts/#options","title":"Options:","text":"<ol> <li> <p>Pre-install : before release</p> </li> <li> <p>Post-install : After installation of release</p> </li> <li> <p>Pre-delete : before uninstall</p> </li> <li> <p>Post-delete : After uninstall</p> </li> <li> <p>Pre-upgrade</p> </li> <li> <p>Post-upgrade</p> </li> <li> <p>Pre-rollback : Before the rollback of any installation</p> </li> <li> <p>Post-rollback</p> </li> <li> <p>Test : To perform tests.</p> </li> </ol> <p>Other property</p> <ol> <li> <p>Before-hook-creation</p> </li> <li> <p>Hook-succeeded</p> </li> <li> <p>Hook-failed</p> </li> </ol> <p>Weight</p> <p>Ascending order. If you have multiple hooks, you can define this.</p>"},{"location":"Helm/adv_charts/#_1","title":"Advanced Chart","text":""},{"location":"Helm/adv_charts/#create-and-use-hook","title":"Create and use hook","text":"<p>With hook-succeeded in the delete-policy, the pod is deleted when the hook is successfully created.</p> <p></p>"},{"location":"Helm/adv_charts/#testing-your-chart","title":"Testing your chart","text":"<p>By default when a new chart is created, test-connection.yaml file is created.</p> <p>By default a test type hook is added in the annotations.</p> <p></p> <p>In above case, the test is run on the nginx pod, wget command is used to test the connection. If the wget command returns 0 its successful and if it returns non-zero code, then its a failure.</p>"},{"location":"Helm/adv_charts/#perform-testing-on-a-chart","title":"Perform testing on a chart","text":"<p>Helm test is conducted on a release but not at the template level. So run the installation first.</p> <p>Then run the below command to run the tests.</p> <p>\\$helm test secondchart</p> <p></p>"},{"location":"Helm/adv_charts/#assignment-3","title":"Assignment 3","text":"<p>Create a chart dependency, Package, Install the chart.</p> <p>Dependency : tomcat</p> <p>Custom values:</p> <p>tomcat:</p> <p>service:</p> <p>type: NodePort</p> <p>nodePort: 30007</p> <p></p>"},{"location":"Helm/adv_charts/#repositories","title":"Repositories","text":"<p>Helm repos are simple http repositories. In this you will learn how to</p> <ul> <li> <p>generate indexes</p> </li> <li> <p>Setup local repo using Python web server</p> </li> <li> <p>Host a public chart repository using GitHub pages</p> </li> <li> <p>Launch OCI registry locally using Docker</p> </li> </ul>"},{"location":"Helm/adv_charts/#how-to-host-local-chart-repository","title":"How to host local chart repository","text":"<p>Create a folder chartsrepo</p> <p>Or use command \\$ helm repo index chartsrepo/</p> <p>This will create index.yaml file.</p> <p></p> <p>Index.yaml contents</p> <p></p> <p>Now package and put the chart in the chartsrepo folder.</p> <p></p> <p>Now update the repo index and observe the changes.</p> <p></p>"},{"location":"Helm/adv_charts/#host-webserver-using-python","title":"Host webserver using python","text":"<p>Run the http server in the chartsrepo directory</p> <p>\\$ python3 -m http.server --bind 127.0.0.1 8080</p> <p></p>"},{"location":"Helm/adv_charts/#using-the-local-repository","title":"Using the local repository","text":"<p>First add the local repository</p> <p>Currently we only have the bitnami repo</p> <p></p> <p>Add the local repo</p> <p></p> <p>Install from repo</p> <p></p>"},{"location":"Helm/adv_charts/#installing-using-helm-pull","title":"Installing using HELM PULL","text":"<p>Instead of pulling the chart from the local or remote repository, we can first download the chart locally and then install it.</p> <p>Pull the chart locally.</p> <p></p>"},{"location":"Helm/adv_charts/#update-repositories","title":"Update Repositories","text":"<p>Sometimes when the new chart is added to the repositories, helm search command won\u2019t pickup as the helm search command uses a local cache to search for the chart packages.</p> <p></p> <p>In order to update the local chart repo use</p> <p></p> <p>With this, the local cache is updated and we can search the new cache.</p>"},{"location":"Helm/adv_charts/#github-pages-for-hosting-your-charts","title":"Github Pages for hosting your charts","text":"<ol> <li> <p>Create a new repository</p> </li> <li> <p>Set access to public</p> </li> <li> <p>Readme and all are optional</p> </li> <li> <p>Goto command line</p> </li> <li> <p>clone the repository locally</p> </li> <li> <p>Create new chart in the gir repo folder</p> </li> <li> <p>Create package from the chart</p> </li> <li> <p>Index the chart in the same folder</p> </li> <li> <p>Perform git add, commit and push</p> </li> </ol> <p>To use this git repo as pages, goto github repo settings -&gt; pages -&gt; select source to master</p> <p>By this, github repository is configured as webserver and all the changes are published.</p> <p>Once saved, the site url is generated and you can use it as a helm repository.</p> <p></p> <p>Index the repository</p> <p></p> <p>Push changes to git</p> <p></p> <p>Change the settings of the repository</p> <p></p> <p>Upon saving copy the URL and add repo in your local</p> <p></p> <p></p>"},{"location":"Helm/adv_charts/#oci-experimental","title":"OCI Experimental","text":"<p>Using the Open Container Initiative to host helm repositories.</p> <p>First enable the HELM_EXPERIMENTAL_OCI. You can do it by configuring an environment variable.</p> <p></p> <p>Run local OCI registry using Docker image</p> <p></p> <p>Now the OCI registry is created. Let\u2019s create the package from a chart</p> <p></p> <p>Commands</p> Push chart helm push ocichart-0.2.0.tgz oci://localhost:5001/helm-charts Show all helm show all oci://localhost:5001/helm-charts/ocichart --version 0.1.0 Pull chart helm pull oci://localhost:5001/helm-charts/ocichart --version 0.1.0 See template helm template myrelease oci://localhost:5001/helm-charts/ocichart \u2013version 0.1.0 Install chart helm install myrelease oci://localhost:5001/helm-charts/ocichart \u2013version 0.1.0 Upgrade chart helm upgrade myrelease oci://localhost:5001/helm-charts/ocichart \u2013version 0.2.0 Login to registry helm registry login -u username oci://localhost:5001 Logout from registry helm registry logout oci://localhost:5001"},{"location":"Helm/adv_charts/#chart-security","title":"Chart Security","text":"<p>When it comes to charts, provenance and integrity are important.</p> <p>Provenance : Ensuring that the chart is from the right provider</p> <p>Integrity : Ensuring that the contents of the chart are not altered.</p> <p>Helm uses inbuilt PGP(pretty good privacy). Where private key and public key are used.</p> <p>The private key is used to encrypt the package.tgz file which creates package.tgz.prov file. Both these files are then pushed to the repository.</p> <p>The public key of the provider is used by the user to ensure that the signature of the downloaded chart are same using the command</p> <p>\\$ helm install --verify</p>"},{"location":"Helm/adv_charts/#pgp-installation","title":"PGP Installation","text":"<p>We need a public and private key</p> <ul> <li> <p>Download GNUPG from gnupg.org</p> </li> <li> <p>Perform the installation (For mac use brew install gnupg)</p> </li> </ul> <p>Run the command</p> <p>Gnu privacy guard(gpg)</p> <p>\\$ gpg \u2013version</p> <p>This is where all the keys are stored. You can use these keys to sign and verify the chart</p>"},{"location":"Helm/adv_charts/#generate-the-key","title":"Generate the key","text":"<p>\\$ gpg --full-generate-key</p> <p>Select the type of the key (default is RSA)</p> <p>Select the size : 3072 is default</p> <p>Select the expiration: 0 is for never expire</p> <p>Give the real name : YOUR NAME</p> <p>Email address : Email is used as alias to the key</p> <p>Comment : optional</p> <p>Finally, you have to select the passphrase to access the keys.</p> <p></p> <p>By now the keys are stored under ~/.gnupg/</p> <p>As of 2021, kbx files are generated by pgp commands. But we need to convert them to .gpg files for helm to use.</p> <p></p> <p>Use the below command to perform the conversion.</p> <p>\\$ gpg --export-secret-keys &gt; ~/.gnupg/secring.gpg</p> <p></p> <p>Now both public and private keys are part of the gpg file and ready to be used by helm</p>"},{"location":"Helm/adv_charts/#signing-charts","title":"Signing Charts","text":"<p>Let\u2019s sign the chart while packaging</p> <ul> <li> <p>Create a new chart</p> </li> <li> <p>Run the command to package along with signing</p> </li> </ul> <p></p> <p>Two files are created.</p> <p></p> <p>The prov file has the signing information.</p>"},{"location":"Helm/adv_charts/#verify-the-signature-of-the-chart","title":"Verify the Signature of the chart","text":"<p>we create an index in the chart repo and start the local repository server.</p> <p>With the below command, we can verify and install the chart when pulled from the repository.</p> <p></p> <p>If the installation fails, then it implies that the chart signature is not verified. You would see an error.</p>"},{"location":"Helm/adv_charts/#use-cases","title":"Use Cases","text":"<p>For this use case, we will be performing below set of actions</p> <ul> <li> <p>Create chart and configure image</p> </li> <li> <p>Update Deployment with probes</p> </li> <li> <p>Configure NodePort, change from default service</p> </li> <li> <p>Add MySQL dependency to the chart</p> </li> <li> <p>Pass values for the MySQL</p> </li> <li> <p>Configure ConfigMap</p> </li> </ul>"},{"location":"Helm/adv_charts/#create-chart-and-configure-image","title":"Create chart and configure image","text":"<p>We dont need hpa(scaling) ingress and service account. So remove those yamls.</p> <p>For all the steps, go through the commits and check the changes.</p> <p>GIT URL:</p> <p></p>"},{"location":"Helm/adv_charts/#helm-starters","title":"HELM Starters","text":"<p>Skipping the topic as it\u2019s not important and is not usually used in corporate.</p>"},{"location":"Kubestronaut/KCNA/","title":"Kubernetes and Cloud-Native Associate (KCNA)","text":""},{"location":"Kubestronaut/KCNA/#kubernetes-and-cloud-native-associate-kcna","title":"Kubernetes and Cloud-Native Associate (KCNA)","text":""},{"location":"Kubestronaut/KCNA/#scheduling","title":"Scheduling","text":""},{"location":"Kubestronaut/KCNA/#pod-binding","title":"Pod Binding","text":"<p>When a pod is already assigned to a node using nodeName. Kubernetes do not allow you to change the ndoe name once assigned. For that you need to use binding</p> pod-binding.yml<pre><code>apiVersion: v1\nkind: Binding \nmetadata:\n    name: nginx\ntarget:\n    apiVersion: v1\n    kind: Node \n    name: node02\n</code></pre> pod-definition.yml<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n    name: nginx \n    labels:\n        name: nginx\nspec:\n    containers:\n    - name: nginx \n      image: nginx \n      ports:\n        - containerPort:\n</code></pre> <p>When pod binding should be used</p> <p>Pod binding is used only when the pod is already bound to a node and you want to change the node. </p>"},{"location":"Kubestronaut/KCNA/#taints-tolerations","title":"Taints &amp; Tolerations","text":""},{"location":"MKDOCS%20Assets/tweaks/","title":"Tweaks","text":"<p>Source Code</p> <p>Reference code base contains all the examples on how to use the Material Design features.</p>"},{"location":"MKDOCS%20Assets/tweaks/#title-to-code-block","title":"Title to Code block","text":"test.sh<pre><code>sh usermod 400 x.pem\n</code></pre> <p>How to use</p> <p>use ``` bash title=\"test.sh\" and then your code snippet.</p>"},{"location":"MKDOCS%20Assets/tweaks/#admonitions","title":"Admonitions","text":"<p>According to Material Docs, the types used in MkDocs and their aliases are:</p> Available admonitions <ul> <li>\"note\" (alias: seealso)</li> <li>\"abstract\" (aliases: summary, tldr)</li> <li>\"info\" (alias: todo)</li> <li>\"tip\" (aliases: hint, important)</li> <li>\"success\" (aliases: check, done)</li> <li>\"question\" (aliases: help, faq)</li> <li>\"warning\" (aliases: caution, attention)</li> <li>\"failure\" (aliases: fail, missing)</li> <li>\"danger\" (alias: error)</li> <li>\"bug\"</li> <li>\"example\"</li> <li>\"quote\" (alias: cite)</li> </ul>"},{"location":"MKDOCS%20Assets/tweaks/#tip","title":"Tip","text":"<p>How to use</p> <p>use !!! tip \"How to use\"</p>"},{"location":"MKDOCS%20Assets/tweaks/#note","title":"Note","text":"<p>How to use</p> <p>use !!! note \"How to use\"</p>"},{"location":"MKDOCS%20Assets/tweaks/#warning","title":"Warning","text":"<p>How to use</p> <p>use !!! warning \"How to use\"</p>"},{"location":"MKDOCS%20Assets/tweaks/#multi-tab","title":"Multi Tab","text":""},{"location":"MKDOCS%20Assets/tweaks/#basic-working","title":"Basic working","text":"UbuntuRHELWindows (PowerShell) Install on Ubuntu<pre><code>apt update &amp;&amp; apt install -y nginx\n</code></pre> Install on RHEL<pre><code>dnf install -y nginx\n</code></pre> Install on Windows<pre><code>winget install nginx\n</code></pre>"},{"location":"MKDOCS%20Assets/tweaks/#tabs-with-different-languages","title":"Tabs with different languages","text":"PythonNode.jsGo client.py<pre><code>import requests\nprint(requests.get(\"https://api.example.com\").json())\n</code></pre> client.mjs<pre><code>const res = await fetch(\"https://api.example.com\");\nconsole.log(await res.json());\n</code></pre> main.go<pre><code>package main\nimport (\"net/http\"; \"io\"; \"fmt\")\nfunc main(){ r,_ := http.Get(\"https://api.example.com\"); b,_ := io.ReadAll(r.Body); fmt.Println(string(b)) }\n</code></pre>"},{"location":"MKDOCS%20Assets/tweaks/#multi-tab-with-superfence","title":"Multi tab with superfence","text":"<p>Choose your OS</p> UbuntuRHEL <pre><code>apt install -y nginx\n</code></pre> <pre><code>dnf install -y nginx\n</code></pre>"},{"location":"MKDOCS%20Assets/tweaks/#multi-tab-with-superfence-and-toggle","title":"Multi tab with superfence and toggle","text":"Choose your OS UbuntuRHEL <pre><code>apt install -y nginx\n</code></pre> <pre><code>dnf install -y nginx\n</code></pre>"}]}